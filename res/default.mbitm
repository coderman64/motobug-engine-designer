<?xml version="1.0" encoding="UTF-8"?>
<itemset>
    <item>
        <name>Generic Item</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr>
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr>
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr>
                <name>src</name>
                <type>string-path</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(0,255,255)</color>
            </rect>
        </display>
        <format>item(x,y,w,h,src)</format>
        <code>
            var item = function(x,y,w,h,src){
                this.img = globalImgCache.getImg(src);
                this.w = w;
                this.h = h;
                this.x = x;
                this.y = y;
                this.canvi = document.createElement("canvas");
                this.canvi.width = this.w;
                this.canvi.height = this.h;
                this.c = this.canvi.getContext("2d");
            }
        </code>
    </item>
    <item>
        <name>Player Start Point</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr>
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr>
                <name>h</name>
                <type>size-h</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(0,150,255)</color>
            </rect>
        </display>
        <format>charSpawn(x,y,w,h)</format>
        <code>
            var charSpawn = function(x,y,w,h){
                // provides a nice place for the player to spawn;
                console.log("CHAR POS ACTIVE!");
                char.x = x+w/2;
                char.y = y+h;
                char.startX = x+w/2;
                char.startY = y+h;
                this.x = x;
                this.y = y;
                this.w = w;
                this.h = h;
                this.charSpawn = true;
                this.destroy = false;
                this.draw = function(ctx,camx,camy){};
                this.phys = function(){
                    if(!this.destroy){
                        console.log("SETTING CHAR POS");
                        char.x = this.x+this.w/2;
                        char.y = this.y+this.h;
                        this.destroy = true;
                        cam.x = -char.x;
                        cam.y = -char.y;
                    }
                }
                this.draw = function(ctx,camx,camy){
                    if(devMode){
                        ctx.fillStyle = "#4444ff99";
                        ctx.fillRect(this.x+camx,this.y+camy,this.w,this.h);
                    }
                }
            }
        </code>
    </item>
    <item>
        <name>Spring</name>
        <parameters>
            <pmr default="0">
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr default="0">
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr>
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr>
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="res/items/springY.png">
                <name>src</name>
                <type>string-path</type>
            </pmr>
            <pmr default="12">
                <name>power</name>
                <type>float</type>
            </pmr>
            <pmr default="0">
                <name>angle</name>
                <type>float-angle</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,255,0)</color>
            </rect>
        </display>
        <format>spring(x,y,w,h,src,power,angle)</format>
        <code>
            var spring = function(x,y,w,h,src,power,angle){
                this.x = x;
                this.y = y;
                this.w = w;
                this.h = h;
                this.img = globalImgCache.getImg(src);
                this.power = power;
                this.canvi = document.createElement("canvas");
                this.canvi.width = this.w;
                this.canvi.height = this.h;
                this.c = this.canvi.getContext("2d");
                this.frame = 0;
                this.destroy = false;
                this.targetable = true;
                this.hrid = "spring";
                this.hit = function(char){
                    if(char.state != -1 &amp;&amp;char.yv &lt; 0.1&amp;&amp;char.y-this.y &gt; 10){
                        if(char.x &lt; this.x+this.w/2){
                            char.x = this.x-15;
                            char.Gv = 0.001;
                            if(keysDown[39]){
                                char.animSpeed = 0.05;
                                char.currentAnim = anim.push;
                            }
                        }
                        if(char.x > this.x+this.w/2){
                            char.x = this.x+this.w+15;
                            char.Gv = -0.001;
                            if(keysDown[37]){
                                char.animSpeed = 0.05;
                                char.currentAnim = anim.push;
                            }
                        }
                    }
                    else if(char.yv > 0&amp;&amp;char.y+char.yv &gt; this.y+16)
                    {
                        char.state = -1;
                        char.Gv = char.xv;
                        char.yv = -this.power;
                        char.y -= 6;
                        char.GRV = 0.21875;
                        this.frame = 1;
                        char.jumpState = 3;
                        spring.sfx.currentTime = 0;
                        spring.sfx.play();
                        if(char.pHoming == true){
                            char.pHoming = false;
                        }
                    }
                }
                this.draw = function(ctx,camx,camy){
                    if(this.frame > 0){
                        this.frame += 0.25;
                        if(this.frame >= 4){
                            this.frame = 0;
                        }
                    }
                    debug.addRect(this.x,this.y+16,this.w,this.h-16,"#00FF00AA")
                    this.c.clearRect(0,0,this.w,this.h);
                    this.c.drawImage(this.img,-Math.floor(this.frame)*this.w,0);
                    ctx.drawImage(this.canvi,this.x+camx,this.y+camy,this.w,this.h);
                }
            }
            spring.sfx = document.createElement("audio");
            spring.sfx.src = "res/sfx/spring2.wav";
            spring.sfx.type = "audio/wav";
            spring.sfx.load();
        </code>
    </item>
    <item>
        <name>Horizontal Layer Switch</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr>
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr>
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="0">
                <name>layerL</name>
                <type>int</type>
            </pmr>
            <pmr default="1">
                <name>layerR</name>
                <type>int</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,0,0,100)</color>
            </rect>
        </display>
        <format>layerSwitch(x,y,w,h,layerL,layerR)</format> 
    </item>
        <item>
        <name>Vertical Layer Switch</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr>
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr>
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="0">
                <name>layerD</name>
                <type>int</type>
            </pmr>
            <pmr default="1">
                <name>layerU</name>
                <type>int</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,0,0,100)</color>
            </rect>
        </display>
        <format>VlayerSwitch(x,y,w,h,layerD,layerU)</format> 
    </item>
    <item>
        <name>Ring</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="16">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="16">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="res/items/ring.png">
                <name>src</name>
                <type>string-path</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,255,0)</color>
            </rect>
        </display>
        <format>ring(x,y,w,h,src)</format>
    </item>
    <item>
        <name>Warp Ring</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="64">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="64">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="res/items/WarpRing_empty.png">
                <name>disap</name>
                <type>string-path</type>
            </pmr>
            <pmr default="res/items/WarpRing.png">
                <name>full</name>
                <type>string-path</type>
            </pmr>
            <pmr default="0">
                <name>specLvl</name>
                <type>int</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,255,0)</color>
            </rect>
        </display>
        <format>WarpRing(x,y,w,h,disap,full,specLvl)</format>
    </item>
    <item>
        <name>Run Compeller</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="16">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="16">
                <name>h</name>
                <type>size-h</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(0,255,100)</color>
            </rect>
        </display>
        <format>runCompeller(x,y,w,h)</format>
    </item>
    <item>
        <name>Ring Goal</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="32">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="128">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="50">
                <name>rings</name>
                <type>int</type>
            </pmr>
            <pmr default="0">
                <name>final</name>
                <type>int</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(0,255,100)</color>
            </rect>
        </display>
        <format>ringGoal(x,y,w,h,rings,final)</format>
    </item>
    <item>
        <name>Ring Start</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="32">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="128">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="50">
                <name>rings</name>
                <type>int</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,0,100)</color>
            </rect>
        </display>
        <format>getRings(x,y,w,h,rings)</format>
    </item>
    <item>
        <name>Credit Roll</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="32">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="128">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="Based on the Motobug Engine by Coderman64">
                <name>text</name>
                <type>string</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,0,100)</color>
            </rect>
        </display>
        <format>creditsRoll(x,y,w,h,text)</format>
    </item>
    <item>
        <name>Title Warper</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="32">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="128">
                <name>h</name>
                <type>size-h</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(0,255,100)</color>
            </rect>
        </display>
        <format>warpToTitle(x,y,w,h)</format>
    </item>
    <item>
        <name>Hidden Spring</name>
        <parameters>
            <pmr default="0">
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr default="0">
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="32">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="16">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="res/items/springY.png">
                <name>src</name>
                <type>string-path</type>
            </pmr>
            <pmr default="12">
                <name>power</name>
                <type>float</type>
            </pmr>
            <pmr default="0">
                <name>angle</name>
                <type>float-angle</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,255,0)</color>
            </rect>
        </display>
        <format>hiddenSpring(x,y,w,h,src,power,angle)</format>
    </item>
    <item>
        <name>Spikes</name>
        <parameters>
            <pmr default="0">
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr default="0">
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="32">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="32">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="res/items/spikes.png">
                <name>src</name>
                <type>string-path</type>
            </pmr>
            <pmr default="0">
                <name>angle</name>
                <type>float-angle</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(150,150,150)</color>
            </rect>
        </display>
        <format>spikes(x,y,w,h,src,angle)</format>
    </item>
    <item>
        <name>Motobug</name>
        <parameters>
            <pmr default="0">
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr default="0">
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="41">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="41">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="res/characters/enemies/motobug.png">
                <name>src</name>
                <type>string-path</type>
            </pmr>
            <pmr default="0">
                <name>layer</name>
                <type>int</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(200,0,0)</color>
            </rect>
        </display>
        <format>motobug(x,y,w,h,src,layer)</format>
    </item>
    <item>
        <name>Fall Warning</name>
        <parameters>
            <pmr default="0">
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr default="0">
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="64">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="64">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="res/items/warning.png">
                <name>src</name>
                <type>string-path</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(255,100,0)</color>
            </rect>
        </display>
        <format>fallWarning(x,y,w,h,src)</format>
    </item>
    <item>
        <name>Level Complete Sign</name>
        <parameters>
            <pmr default="0">
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr default="0">
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr default="48">
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr default="48">
                <name>h</name>
                <type>size-h</type>
            </pmr>
            <pmr default="0">
                <name>nextLevel</name>
                <type>int</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(0,255,100)</color>
            </rect>
        </display>
        <format>levelSign(x,y,w,h,nextLevel)</format>
    </item>
    <item>
        <name>Water Level</name>
        <parameters>
            <pmr>
                <name>x</name>
                <type>position-x</type>
            </pmr>
            <pmr>
                <name>y</name>
                <type>position-y</type>
            </pmr>
            <pmr>
                <name>w</name>
                <type>size-w</type>
            </pmr>
            <pmr>
                <name>h</name>
                <type>size-h</type>
            </pmr>
        </parameters>
        <display>
            <rect>
                <color>(0,0,255)</color>
            </rect>
        </display>
        <format>waterLine(x,y,w,h)</format>
    </item>
</itemset>